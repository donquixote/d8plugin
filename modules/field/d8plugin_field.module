<?php
use Drupal\d8plugin\Plugin\ConfigurablePluginInterface;
use Drupal\d8plugin_field\DIC\FieldServiceContainer;
use Drupal\d8plugin_field\FieldInfo\EntityTypeField;
use Drupal\d8plugin_field\FieldInfo\FieldDisplay;
use Drupal\d8plugin_field\FieldInfo\ViewModeFieldDisplay;
use Drupal\d8plugin_field\Formatter\Context\ViewModeFieldDisplayFormContext;
use Drupal\d8plugin_field\Formatter\ConfigurableFormatterInterface;
use Drupal\d8plugin_field\Formatter\Context\AlterableFieldItemList;
use Drupal\d8plugin_field\Formatter\Context\FormatterPrepareViewContext;
use Drupal\d8plugin_field\Formatter\Context\FormatterViewContext;
use Drupal\d8plugin_field\Formatter\FormatterPrepareViewInterface;

/**
 * Implements hook_field_formatter_info()
 *
 * @return array
 *   Array with field formatter information.
 *
 * @see link_field_formatter_info()
 */
function d8plugin_field_field_formatter_info() {
  $manager = d8plugin_field()->formatterPluginManager;
  $definitions = $manager->getDefinitions();
  $info = array();
  foreach ($definitions as $pluginId => $definition) {
    $pluginInfo = $definition->getInfo();
    // Unfortunately we need to instantiate a non-configured plugin instance to
    // get the default values.
    $plugin = $manager->createInstance($pluginId);
    if ($plugin instanceof ConfigurablePluginInterface) {
      $pluginInfo['settings'] = $plugin->defaultConfiguration();
    }
    $info[$pluginId] = $pluginInfo;
  }
  return $info;
}

/**
 * Implements hook_field_formatter_settings_form()
 *
 * @param $field
 * @param $instance
 * @param $view_mode
 * @param $form
 * @param $form_state
 *
 * @return array
 *   A form array.
 */
function d8plugin_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];

  $plugin = d8plugin_field()->formatterPluginManager->createInstance(
    $display['type'],
    $display['settings']);

  if (!$plugin instanceof ConfigurableFormatterInterface) {
    return array();
  }

  $context = new ViewModeFieldDisplayFormContext(
    $instance['entity_type'],
    $field,
    $instance,
    $view_mode,
    $form,
    $form_state);

  return $plugin->settingsForm($context);
}

/**
 * Implements hook_field_formatter_settings_summary()
 *
 * @param array $field
 * @param array $instance
 * @param string $view_mode
 *
 * @return string
 */
function d8plugin_field_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];

  $plugin = d8plugin_field()->formatterPluginManager->createInstance(
    $display['type'],
    $display['settings']);

  if (!$plugin instanceof ConfigurableFormatterInterface) {
    return '';
  }

  $context = new ViewModeFieldDisplay(
    $instance['entity_type'],
    $field,
    $instance,
    $view_mode);

  return $plugin->settingsSummary($context);
}

/**
 * Implements hook_field_formatter_prepare_view()
 *
 * @param string $entity_type
 * @param object[] $entities
 * @param array $field
 * @param array[] $instances
 * @param string $langcode
 * @param array[][] $items_grouped
 * @param array[] $displays
 */
function d8plugin_field_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items_grouped, $displays) {

  /** @var int[][] $pluginIds */
  $pluginIds = [];
  foreach ($displays as $entityId => $display) {
    $pluginIds[$display['type']][] = $entityId;
  }

  /** @var FormatterPrepareViewInterface[] $formatters */
  $formatters = array();
  foreach ($pluginIds as $pluginId => $entityIds) {
    $formatter = d8plugin_field()->formatterPluginManager->createInstance($pluginId);
    if ($formatter instanceof FormatterPrepareViewInterface) {
      $formatters[$pluginId] = $formatter;
    }
  }
  if (empty($formatters)) {
    return;
  }

  $context = new FormatterPrepareViewContext($entity_type, $entities, $field, $instances, $langcode, $displays);

  foreach ($formatters as $pluginId => $formatter) {
    $itemsByEntityId = array();
    foreach ($pluginIds[$pluginId] as $entityId) {
      $itemsByEntityId[$entityId] =& $items_grouped[$entityId];
    }
    $formatter->prepareView($itemsByEntityId, $context);
  }
}

/**
 * Implements hook_field_formatter_view()
 *
 * @param string $entity_type
 * @param object $entity
 * @param array $field
 * @param array $instance
 * @param string $langcode
 * @param array[] $items
 * @param array $display
 *
 * @return array
 *   A Drupal render array.
 */
function d8plugin_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $plugin = d8plugin_field()->formatterPluginManager->createInstance(
    $display['type'],
    $display['settings']);

  $context = new FieldDisplay($entity_type, $field, $instance, $display);

  return $plugin->view($items, new FormatterViewContext($entity, $context, $langcode, $items));
}

/**
 * @return FieldServiceContainer
 */
function d8plugin_field() {
  static $services;
  return isset($services)
    ? $services
    : $services = new FieldServiceContainer(d8plugin());
}
